import streamlit as st
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import plotly.express as px
import os
import time

# --- Configura√ß√£o da P√°gina do Streamlit ---
st.set_page_config(
    page_title="Dashboard de Pre√ßos Growth",
    page_icon="üí™",
    layout="wide"
)

st.title("üí™ Dashboard de An√°lise de Pre√ßos - Growth Supplements")

# --- Fun√ß√µes de Coleta e Tratamento (Otimizadas para Streamlit) ---

@st.cache_data
def coleta_dados():
    """
    Usa Selenium para coletar dados do site da Growth e retorna um DataFrame.
    """
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    
    servico = Service(executable_path='/usr/bin/chromedriver')
    navegador = webdriver.Chrome(service=servico, options=options)
    
    lista_produtos = [ ]
    lista_precos = [ ]
    
    navegador.get('https://www.gsuplementos.com.br/lancamentos')
    time.sleep(7)

    # --- MUDAN√áA AQUI: Usando o novo nome da classe para encontrar os produtos ---
    produtos = navegador.find_elements(By.CLASS_NAME, 'cardprod')
    
    for produto in produtos:
        try:
            # --- MUDAN√áA AQUI: Pegando nome e pre√ßo com os seletores corretos ---
            nome = produto.find_element(By.CLASS_NAME, 'cardprod-nomeProduto-t1').text
            preco = produto.find_element(By.CLASS_NAME, 'cardprod-valor').text
            lista_produtos.append(nome)
            lista_precos.append(preco)
        except Exception as e:
            # Se um produto individual falhar, ele ser√° ignorado e o log aparecer√° no terminal
            print(f"Erro ao coletar um produto individual: {e}")
            
    navegador.quit()

    # Se a lista estiver vazia, retorna um DataFrame vazio.
    if not lista_produtos:
        return pd.DataFrame()

    df = pd.DataFrame({'produto': lista_produtos, 'precos': lista_precos})
    os.makedirs('basesoriginais', exist_ok=True)
    df.to_csv('basesoriginais/Growth_dados_raw.csv', sep=';', index=False)
    
    return df

@st.cache_data
def tratamento_dados(df_raw):
    """Recebe um DataFrame bruto, limpa e trata os dados, e retorna um DataFrame tratado."""
    if df_raw.empty:
        return pd.DataFrame()

    df = df_raw.copy()
    
    df['precos'] = df['precos'].str.replace('\n', ' ', regex=False).str.strip()
    # Extrai apenas o valor principal, ignorando os descontos e parcelas.
    df['Preco'] = df['precos'].str.extract(r'R\$\s*([\d,]+)')
    
    df['Preco'] = df['Preco'].str.replace(',', '.', regex=False)
    df['Preco'] = pd.to_numeric(df['Preco'], errors='coerce')
    
    df.dropna(subset=['Preco'], inplace=True)
    df.drop_duplicates(inplace=True)
    
    df = df[['produto', 'Preco']].rename(columns={'produto': 'Produto'})

    os.makedirs('basestratadas', exist_ok=True)
    df.to_csv('basestratadas/Growth_dados_tratados.csv', sep=';', index=False, encoding='utf-8')
    
    return df

# --- Interface Principal do Aplicativo ---

if st.button("üöÄ Iniciar Coleta e An√°lise de Dados"):
    # Limpa o estado da sess√£o anterior para for√ßar uma nova coleta
    if 'df_final' in st.session_state:
        del st.session_state.df_final
    
    with st.spinner('Aguarde! Coletando e tratando dados... Isso pode levar um minuto.'):
        df_raw = coleta_dados()
        df_tratado = tratamento_dados(df_raw)
        
        if not df_tratado.empty:
            st.session_state.df_final = df_tratado
        else:
            # Garante que se a coleta falhar, a mensagem de erro apare√ßa
            st.session_state.coleta_falhou = True

# --- L√≥gica de Exibi√ß√£o do Dashboard ou da Mensagem de Erro ---

# Se a coleta foi bem sucedida, mostra o dashboard
if 'df_final' in st.session_state:
    st.success("Dados coletados e tratados com sucesso!")
    df = st.session_state.df_final
    
    st.divider()
    st.header("Visualiza√ß√£o dos Dados Tratados")
    st.dataframe(df)

    # ... (O resto do seu dashboard continua aqui, sem altera√ß√µes) ...

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("An√°lise de Nulos")
        st.dataframe(df.isnull().sum().reset_index().rename(columns={'index': 'Vari√°vel', 0: 'Qtd. Nulos'}))

    with col2:
        st.subheader("Estat√≠sticas Descritivas")
        st.dataframe(df.describe())

    st.divider()
    st.header("An√°lises dos Pre√ßos")

    media = round(df['Preco'].mean(), 2)
    desvio = round(df['Preco'].std(), 2)
    mediana = round(df['Preco'].median(), 2)
    maximo = round(df['Preco'].max(), 2)
    minimo = round(df['Preco'].min(), 2)

    st.metric("Pre√ßo M√©dio", f"R$ {media}")
    st.write(f"O pre√ßo mediano (50% dos produtos custam at√© este valor) √© de R$ {mediana}.")
    st.write(f"Os pre√ßos variam de **R$ {minimo}** a **R$ {maximo}**.")
    
    col_hist, col_box = st.columns(2)
    
    with col_hist:
        st.subheader("Histograma de Pre√ßos")
        fig_hist = px.histogram(df, x='Preco', nbins=20, title="Distribui√ß√£o de Frequ√™ncia dos Pre√ßos")
        st.plotly_chart(fig_hist, use_container_width=True)

    with col_box:
        st.subheader("Boxplot de Pre√ßos")
        fig_box = px.box(df, y='Preco', title="Dispers√£o e Outliers dos Pre√ßos")
        st.plotly_chart(fig_box, use_container_width=True)

# Se a coleta falhou, mostra a mensagem de erro
elif 'coleta_falhou' in st.session_state:
    st.error("N√£o foi poss√≠vel coletar os produtos. O site pode ter mudado sua estrutura ou pode estar bloqueando o rob√¥.")
    # Limpa o estado de falha para a pr√≥xima tentativa
    del st.session_state.coleta_falhou