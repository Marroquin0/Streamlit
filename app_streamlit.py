import streamlit as st
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import plotly.express as px
import os
import time

# --- Configura√ß√£o da P√°gina do Streamlit ---
st.set_page_config(
    page_title="Dashboard de Pre√ßos Growth",
    page_icon="üí™",
    layout="wide"
)

st.title("üí™ Dashboard de An√°lise de Pre√ßos - Growth Supplements")

# --- Fun√ß√µes de Coleta e Tratamento (Otimizadas para Streamlit) ---

@st.cache_data
def coleta_dados():
    """
    Usa Selenium para coletar dados, salva arquivos de depura√ß√£o e retorna um DataFrame.
    Esta fun√ß√£o N√ÉO deve ter nenhum comando st.(widget).
    """
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    
    servico = Service(executable_path='/usr/bin/chromedriver')
    navegador = webdriver.Chrome(service=servico, options=options)
    
    lista_produtos = []
    lista_precos = []
    
    navegador.get('https://www.gsuplementos.com.br/lancamentos')
    time.sleep(7)

    # Salva arquivos de depura√ß√£o
    try:
        navegador.save_screenshot("debug_screenshot.png")
        with open("debug_page.html", "w", encoding="utf-8") as f:
            f.write(navegador.page_source)
    except Exception as e:
        # Se der erro aqui, imprimimos no log do terminal
        print(f"Erro ao criar arquivos de depura√ß√£o: {e}")

    produtos = navegador.find_elements(By.CLASS_NAME, 'mobile-shelf-item')
    for produto in produtos:
        try:
            nome = produto.find_element(By.TAG_NAME, 'h3').text
            preco = produto.find_element(By.CLASS_NAME, 'price').text
            lista_produtos.append(nome)
            lista_precos.append(preco)
        except Exception as e:
            print(f"Erro ao coletar um produto: {e}")
            
    navegador.quit()

    # Se a lista estiver vazia, retorna um DataFrame vazio.
    # A l√≥gica para mostrar o erro ser√° feita fora desta fun√ß√£o.
    if not lista_produtos:
        return pd.DataFrame()

    df = pd.DataFrame({'produto': lista_produtos, 'precos': lista_precos})
    os.makedirs('basesoriginais', exist_ok=True)
    df.to_csv('basesoriginais/Growth_dados_raw.csv', sep=';', index=False)
    
    return df

@st.cache_data
def tratamento_dados(df_raw):
    """Recebe um DataFrame bruto, limpa e trata os dados, e retorna um DataFrame tratado."""
    if df_raw.empty:
        return pd.DataFrame()

    df = df_raw.copy()
    df['precos'] = df['precos'].str.replace('\n', ' ', regex=False).str.strip()
    df['Preco'] = df['precos'].str.extract(r'R\$\s*([\d,]+)')
    df['Preco'] = df['Preco'].str.replace(',', '.', regex=False)
    df['Preco'] = pd.to_numeric(df['Preco'], errors='coerce')
    df.dropna(subset=['Preco'], inplace=True)
    df.drop_duplicates(inplace=True)
    df = df[['produto', 'Preco']].rename(columns={'produto': 'Produto'})
    os.makedirs('basestratadas', exist_ok=True)
    df.to_csv('basestratadas/Growth_dados_tratados.csv', sep=';', index=False, encoding='utf-8')
    
    return df

# --- Interface Principal do Aplicativo ---
# Esta parte √© executada toda vez. √â aqui que os widgets devem ficar.

if st.button("üöÄ Iniciar Coleta e An√°lise de Dados"):
    # Limpa o estado da sess√£o anterior para for√ßar uma nova coleta
    if 'df_final' in st.session_state:
        del st.session_state.df_final
    
    with st.spinner('Aguarde! Coletando e tratando dados...'):
        df_raw = coleta_dados()
        df_tratado = tratamento_dados(df_raw)
        
        # Se a coleta falhou (retornou df vazio), n√£o guarda nada na sess√£o.
        # Se funcionou, guarda o resultado na sess√£o.
        if not df_tratado.empty:
            st.session_state.df_final = df_tratado
        else:
            # Garante que se a coleta falhar, o dashboard antigo n√£o continue aparecendo
            if 'df_final' in st.session_state:
                del st.session_state.df_final

# L√≥gica de exibi√ß√£o fora do bot√£o
if 'df_final' in st.session_state:
    st.success("Dados coletados e tratados com sucesso!")
    df = st.session_state.df_final
    
    st.divider()
    st.header("Visualiza√ß√£o dos Dados Tratados")
    st.dataframe(df)

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("An√°lise de Nulos")
        st.dataframe(df.isnull().sum().reset_index().rename(columns={'index': 'Vari√°vel', 0: 'Qtd. Nulos'}))
    with col2:
        st.subheader("Estat√≠sticas Descritivas")
        st.dataframe(df.describe())

    # ... (resto do seu dashboard continua aqui) ...

else:
    # Se o df_final n√£o est√° na sess√£o, significa que ou o bot√£o n√£o foi apertado,
    # ou a coleta falhou. Agora verificamos se foi por falha na coleta.
    if os.path.exists("debug_screenshot.png"):
        st.error("N√£o foi poss√≠vel coletar os produtos. O site pode ter mudado sua estrutura, ou pode estar bloqueando o rob√¥.")
        st.info("Arquivos de depura√ß√£o foram gerados. Use os bot√µes abaixo para baix√°-los e analisar o problema.")
        
        with open("debug_screenshot.png", "rb") as file:
            st.download_button(
                label="Baixar Foto da Tela (screenshot.png)",
                data=file,
                file_name="screenshot.png",
                mime="image/png"
            )
        with open("debug_page.html", "r", encoding="utf-8") as file:
            st.download_button(
                label="Baixar C√≥digo HTML da P√°gina (pagina.html)",
                data=file,
                file_name="pagina.html",
                mime="text/html"
            )